(function(){"use strict";angular.module("amo.multiselect",["ui.bootstrap.dropdown"])})();(function(){"use strict";angular.module("multiselectDemo",["amo.multiselect"])})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",MultiselectDropdownDirective);function MultiselectDropdownDirective(){return{link:link,restrict:"E",templateUrl:"multiselect/multiselect-dropdown.html"};function link(scope,element,attrs){var self=scope.multiselectDropdown;self.getSelectAllLabel=getSelectAllLabel;self.toggleAllSelectedState=toggleAllSelectedState;self.toggleSelectedState=toggleSelectedState;function getSelectAllLabel(){return self.isAllSelected?self.text.deselectAll:self.text.selectAll}function toggleAllSelectedState(){self.isAllSelected=!self.isAllSelected;angular.forEach(self.optionsFiltered,function(optionsFiltered){angular.forEach(optionsFiltered,function(option){option.selected=self.isAllSelected})});self.exposeSelectedOptions()}function toggleSelectedState(option){option.selected=!option.selected;self.exposeSelectedOptions()}}}})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselect",MultiselectDirective);function MultiselectDirective($compile,$parse,$timeout,AmoMultiselectFactory,amoMultiselectFormatService,filterFilter){return{link:link,replace:true,require:"ngModel",restrict:"E"};function link(parentScope,element,attrs,ngModelController){var _exposeLabel=attrs.label?$parse(attrs.label):angular.noop,_isInternalChange,_labels=[],_onChange=attrs.onChange?$parse(attrs.onChange):angular.noop,_onToggleDropdown=attrs.onToggleDropdown?$parse(attrs.onToggleDropdown):angular.noop,_selectedOptions=[];var multiselect=new AmoMultiselectFactory(attrs.options,parentScope),scope=parentScope.$new(),self={};scope.multiselectDropdown=self;self.groups=[];self.groupOptions={};self.optionsFiltered={};self.search={};self.text={deselectAll:attrs.deselectAllText||"Deselect All",search:attrs.searchText||"Search...",selectAll:attrs.selectAllText||"Select All"};self.exposeSelectedOptions=exposeSelectedOptions;self.getSelectedCount=getSelectedCount;self.hasSelectedMultipleItems=hasSelectedMultipleItems;self.isGroupVisible=isGroupVisible;self.onToggleDropdown=onToggleDropdown;initialize();function addLabel(option){_labels.push(multiselect.getLabel(option))}function exposeOptions(){var group,i,selected,value;_labels.length=0;self.groups.length=0;self.groupOptions={};self.optionsFiltered={};multiselect.getOptions().forEach(function(option,index){selected=false;value=multiselect.getValue(option);for(i=0;i<_selectedOptions.length;i++){if(angular.equals(_selectedOptions[i],value)){selected=true;addLabel(option);break}}group=multiselect.getGroup(option);if(angular.isUndefined(self.groupOptions[group])){self.groups.push(group);self.groupOptions[group]=[]}self.groupOptions[group].push({id:index,label:multiselect.getLabel(option),value:value,selected:selected})});setSelectedLabel()}function exposeSelectedOptions(){var option;_labels.length=0;_selectedOptions.length=0;angular.forEach(self.groupOptions,function(options){angular.forEach(options,function(optionModel,index){if(!optionModel.selected){return}option=multiselect.getOption(index);addLabel(option);_selectedOptions.push(multiselect.getValue(option))})});_isInternalChange=true;ngModelController.$setViewValue(_selectedOptions);_onChange(scope,{label:setSelectedLabel()})}function getSelectedCount(){return _selectedOptions.length}function hasSelectedMultipleItems(){return getSelectedCount()>1}function initialize(){element.append($compile("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(scope));parentScope.$on("$destroy",function(){scope.$destroy()});parentScope.$watch(multiselect.getOptionsExpression(),function(options){multiselect.setOptions(options);exposeOptions()},true);parentScope.$watch(function(){return ngModelController.$modelValue},function(modelValue){if(_isInternalChange){_isInternalChange=false;return}if(angular.isArray(modelValue)){_selectedOptions=modelValue}exposeOptions()},true)}function isGroupVisible(group){if(!multiselect.isGrouped()){return false}return filterFilter(self.groupOptions[group],self.search).length>0}function onToggleDropdown(isOpen){if(!isOpen){$timeout(function(){self.search={}})}_onToggleDropdown(scope,{isOpen:isOpen})}function setSelectedLabel(){var label=attrs.selectText||"Select...";if(_labels.length>0){if(angular.isDefined(_labels[0])){label=amoMultiselectFormatService.joinLabels(_labels)}else{label=amoMultiselectFormatService.pluralize(_labels,attrs.selectedSuffixText,attrs.selectedSuffixSingularText||attrs.selectedSuffixText)}}self.selectedLabel=label;if(angular.isFunction(_exposeLabel.assign)){_exposeLabel.assign(parentScope,label)}return label}}}})();(function(){"use strict";angular.module("amo.multiselect").factory("AmoMultiselectFactory",MultiselectFactory);function MultiselectFactory($parse){var _optionsRegularExpression=/^\s*(?:(\S+)\s+as\s+)?(\S+)(?:\s+group\s+by\s+(\S+?))?\s+for\s+(\S+)\s+in\s+(\S+)\s*$/;return function MultiselectFactoryConstructor(options,scope){var self=this;var _parse;self.getGroup=getGroup;self.getLabel=getLabel;self.getOption=getOption;self.getOptionsExpression=getOptionsExpression;self.getOptions=getOptions;self.getValue=getValue;self.isGrouped=isGrouped;self.setOptions=setOptions;initialize();function getGroup(option){if(!isGrouped()){return null}return _parse.groupFunction(scope,getLocals(option))}function getLabel(option){return _parse.labelFunction(scope,getLocals(option))}function getLocals(option){var locals={};locals[_parse.value]=option;return locals}function getOption(index){return _parse.options[index]}function getOptionsExpression(){return _parse.optionsExpression}function getOptions(){return _parse.options}function getValue(option){return _parse.selectFunction(scope,getLocals(option))}function initialize(){var expression=options.match(_optionsRegularExpression);if(expression===null){throw new Error('Expected "'+options+'" to be in form of "[_select_ as] _label_ [group by _group_] for _value_ in _array_"')}_parse={groupFunction:angular.isDefined(expression[3])?$parse(expression[3]):null,labelFunction:$parse(expression[2]),optionsExpression:expression[5],selectFunction:$parse(angular.isDefined(expression[1])?expression[1]:expression[4]),value:expression[4]}}function isGrouped(){return _parse.groupFunction!==null}function setOptions(options){if(!angular.isArray(options)){throw new Error('Expected "'+_parse.optionsExpression+'" to be Array')}_parse.options=options;return _parse.options}return self}}})();(function(){"use strict";angular.module("amo.multiselect").service("amoMultiselectFormatService",MultiselectFormatService);function MultiselectFormatService(){var self=this;self.joinLabels=joinLabels;self.pluralize=pluralize;function joinLabels(labels){var label,lastLabel;if(labels.length===1){return labels[0]}lastLabel=labels.pop();label=labels.join(", ");if(labels.length>1){label+=","}return label+" and "+lastLabel}function pluralize(labels,suffix,singularSuffix){var label=labels.length+" ";if(labels.length===1){label+=singularSuffix||"item"}else{label+=suffix||"items"}return label}}})();(function(){"use strict";angular.module("multiselectDemo").controller("AppController",AppController);function AppController($timeout){var self=this;self.modelObject=[{id:2,label:"Two"}];self.modelObjectGrouped=[{category:"Pizza",id:2,label:"Two"}];self.modelObjectProperty=[2];self.modelStringTwo=["One","Two"];self.optionsObject=[{id:1,label:"One"},{id:2,label:"Two"},{id:3,label:"Three"}];self.optionsObjectDefer=[{id:1},{id:2},{id:3}];self.optionsObjectGrouped=[{category:"Pizza",id:1,label:"One"},{category:"Pizza",id:2,label:"Two"},{category:"Hamburger",id:3,label:"Three"}];self.optionsString=["One","Two","Three"];self.addObject=addObject;self.onChange=onChange;self.onToggleDropdown=onToggleDropdown;function addObject(){self.optionsObject.push({id:self.optionsObject.length+1,label:"Option "+(self.optionsObject.length+1)})}function onChange(label){console.log("onChange",label)}function onToggleDropdown(isOpen){console.log("onToggleDropdown",isOpen);if(isOpen){$timeout(function(){self.optionsObjectDefer=self.optionsObject},300)}}}})();angular.module("amo.multiselect").run(["$templateCache",function($templateCache){$templateCache.put("multiselect/multiselect-dropdown.html",'<div\n    class="btn-group btn-group-multiselect"\n    auto-close="outsideClick"\n    ng-attr-title="{{ multiselectDropdown.selectedLabel }}"\n    ng-class="{ \'state-selected-multiple\': multiselectDropdown.hasSelectedMultipleItems() }"\n    on-toggle="multiselectDropdown.onToggleDropdown(open)"\n    uib-dropdown>\n    <button\n        type="button"\n        class="btn btn-default"\n        uib-dropdown-toggle>\n        <span class="text" ng-bind="multiselectDropdown.selectedLabel"></span>\n        <span class="badge" ng-bind="multiselectDropdown.getSelectedCount()"></span>\n        <span class="caret"></span>\n    </button>\n    <div uib-dropdown-menu>\n        <input\n            type="text"\n            class="form-control"\n            ng-model="multiselectDropdown.search.label"\n            placeholder="{{ multiselectDropdown.text.search }}">\n        <ul class="dropdown-menu-list list-unstyled">\n            <li>\n                <a ng-click="multiselectDropdown.toggleAllSelectedState()">\n                    <input type="checkbox" ng-model="multiselectDropdown.isAllSelected">\n                    <span ng-bind="multiselectDropdown.getSelectAllLabel()"></span>\n                </a>\n            </li>\n            <li class="divider"></li>\n            <li\n                class="dropdown-header"\n                ng-bind="group"\n                ng-if="multiselectDropdown.isGroupVisible(group)"\n                ng-repeat-start="group in multiselectDropdown.groups">\n            </li>\n            <li ng-repeat="option in multiselectDropdown.optionsFiltered[group] = (multiselectDropdown.groupOptions[group] | filter : multiselectDropdown.search)">\n                <a ng-click="multiselectDropdown.toggleSelectedState(option)">\n                    <input type="checkbox" ng-model="option.selected">\n                    <span ng-bind="option.label"></span>\n                </a>\n            </li>\n            <li ng-repeat-end></li>\n        </ul>\n    </div>\n</div>\n')}]);