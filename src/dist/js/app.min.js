(function(){"use strict";angular.module("multiselectDemo",["multiselectDemo.core"])})();(function(){"use strict";angular.module("multiselectDemo.core",["amo.multiselect"])})();(function(){"use strict";angular.module("amo.multiselect",["ui.bootstrap.dropdown"])})();(function(){"use strict";angular.module("multiselectDemo.core").controller("AppController",AppController);function AppController(){var self=this;self.modelObject=[{id:2,label:"Two"}];self.modelObjectProperty=[2];self.modelStringTwo=["Two"];self.optionsObject=[{id:1,label:"One"},{id:2,label:"Two"},{id:3,label:"Three"}];self.optionsString=["One","Two","Three"];self.addObject=addObject;function addObject(){self.optionsObject.push({id:self.optionsObject.length+1,label:"Option "+(self.optionsObject.length+1)})}}})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",MultiselectDropdownDirective);function MultiselectDropdownDirective(){return{link:link,restrict:"E",templateUrl:"app/multiselect/multiselect-dropdown.html"};function link(scope,element,attrs){scope.getSelectAllLabel=getSelectAllLabel;scope.toggleAllSelectedState=toggleAllSelectedState;scope.toggleSelectedState=toggleSelectedState;function getSelectAllLabel(){return(scope.isAllSelected?"Deselect":"Select")+" All"}function toggleAllSelectedState(){scope.isAllSelected=!scope.isAllSelected;scope.options.forEach(function(option){option.selected=scope.isAllSelected});scope.exposeSelectedOptions()}function toggleSelectedState(option){option.selected=!option.selected;scope.exposeSelectedOptions()}}}})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselect",MultiselectDirective);function MultiselectDirective($compile,AmoMultiselectFactory){return{link:link,replace:true,restrict:"E",require:"ngModel"};function link(parentScope,element,attrs,ngModelController){var _isInternalChange,_labels=[],_selectedOptions=[];var multiselect=new AmoMultiselectFactory(attrs.options,parentScope),scope=parentScope.$new();scope.options=[];scope.search={};scope.getSelectedCount=getSelectedCount;scope.exposeSelectedOptions=exposeSelectedOptions;initialize();function addLabel(option){_labels.push(multiselect.getLabel(option))}function exposeOptions(){var i,selected,value;_labels.length=0;scope.options.length=0;multiselect.getOptions().forEach(function(option,index){selected=false;value=multiselect.getValue(option);for(i=0;i<_selectedOptions.length;i++){if(angular.equals(_selectedOptions[i],value)){selected=true;addLabel(option);break}}scope.options.push({id:index,label:multiselect.getLabel(option),value:value,selected:selected})});setSelectedLabel()}function exposeSelectedOptions(){var option;_labels.length=0;_selectedOptions.length=0;scope.options.forEach(function(optionModel,index){if(!optionModel.selected){return}option=multiselect.getOption(index);addLabel(option);_selectedOptions.push(multiselect.getValue(option))});_isInternalChange=true;ngModelController.$setViewValue(_selectedOptions);setSelectedLabel()}function getSelectedCount(){return _selectedOptions.length}function initialize(){element.append($compile("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(scope));parentScope.$on("$destroy",function(){scope.$destroy()});scope.$watch(multiselect.getOptionsExpression(),function(options){multiselect.setOptions(options);exposeOptions()},true);scope.$watch(function(){return ngModelController.$modelValue},function(modelValue){if(_isInternalChange){_isInternalChange=false;return}if(angular.isArray(modelValue)){_selectedOptions=modelValue}exposeOptions()},true)}function setSelectedLabel(){var label="Select...";if(_labels.length>0){label=_labels.join(", ")}scope.selectedLabel=label}}}})();(function(){"use strict";angular.module("amo.multiselect").service("AmoMultiselectFactory",MultiselectFactory);function MultiselectFactory($parse){var _optionsRegularExpression=/^\s*(?:(\S+)\s+as\s+)?(\S+)\s+for\s+(\S+)\s+in\s+(\S+)\s*$/;return function MultiselectFactoryConstructor(options,scope){var self=this;var _parse;self.getLabel=getLabel;self.getOption=getOption;self.getOptionsExpression=getOptionsExpression;self.getOptions=getOptions;self.getValue=getValue;self.setOptions=setOptions;initialize();function getLabel(option){return _parse.labelFunction(scope,getLocals(option))}function getLocals(option){var locals={};locals[_parse.value]=option;return locals}function getOption(index){return _parse.options[index]}function getOptionsExpression(){return _parse.optionsExpression}function getOptions(){return _parse.options}function getValue(option){return _parse.selectFunction(scope,getLocals(option))}function initialize(){var expression=options.match(_optionsRegularExpression);if(expression===null){throw new Error('Expected "'+options+'" to be in form of "_label_ for _value_ in _array_"')}_parse={labelFunction:$parse(expression[2]),optionsExpression:expression[4],selectFunction:$parse(angular.isDefined(expression[1])?expression[1]:expression[3]),value:expression[3]}}function setOptions(options){if(!angular.isArray(options)){throw new Error('Expected "'+_parse.optionsExpression+'" to be Array')}_parse.options=options;return _parse.options}return self}}})();