// AngularJS Multiselect
// https://github.com/namoscato/angular-multiselect
// 
// Version: 1.2.3
// License: MIT
(function(){"use strict";angular.module("amo.multiselect",["ui.bootstrap.dropdown"])})();(function(){"use strict";angular.module("multiselectDemo",["amo.multiselect"])})();(function(){"use strict";angular.module("amo.multiselect").constant("amoMultiselectConfig",{deselectAllText:"Deselect All",filterText:"Search...",isDeselectAllEnabled:true,isDisabled:false,isFilterEnabled:true,isSelectAllEnabled:true,selectAllText:"Select All",selectedSuffixSingularText:"item",selectedSuffixText:"items",selectText:"Select..."})})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",e);function e(){return{link:e,restrict:"E",templateUrl:"amo/multiselect/multiselect-dropdown.html"};function e(e,t,l){var n=e.multiselectDropdown;n.getSelectAllLabel=o;n.toggleAllSelectedState=i;n.toggleSelectedState=s;function o(){if(n.state.isSelectAllCheckboxVisible){return n.isAllSelected?n.text.deselectAll:n.text.selectAll}else if(n.state.isSelectAllEnabled){return n.text.selectAll}return n.text.deselectAll}function i(){var e;n.isAllSelected=!n.isAllSelected;if(!n.state.isSelectAllEnabled){e=false}else if(!n.state.isDeselectAllEnabled){e=true}else{e=n.isAllSelected}angular.forEach(n.optionsFiltered,function(t){angular.forEach(t,function(t){t.selected=e})});n.exposeSelectedOptions()}function s(e){e.selected=!e.selected;n.exposeSelectedOptions()}}}})();(function(){"use strict";e.$inject=["$compile","$parse","$timeout","AmoMultiselectFactory","amoMultiselectConfig","amoMultiselectFormatService","filterFilter"];angular.module("amo.multiselect").directive("amoMultiselect",e);function e(e,t,l,n,o,i,s){return{link:r,require:"ngModel",restrict:"E"};function r(r,u,c,a){var p=c.label?t(c.label):angular.noop,d=v("isDeselectAllEnabled",true),g,f=v("isSelectAllEnabled",true),m=[],b=c.onChange?t(c.onChange):angular.noop,w=c.onToggleDropdown?t(c.onToggleDropdown):angular.noop,h=[];var S=new n(c.options,r),D=r.$new(),x={};D.multiselectDropdown=x;x.groups=[];x.groupOptions={};x.optionsFiltered={};x.filter={};x.state={isDeselectAllEnabled:d,isDisabled:v("isDisabled",true),isFilterEnabled:v("isFilterEnabled",true),isSelectAllEnabled:f,isSelectAllVisible:f||d,isSelectAllCheckboxVisible:f&&d};x.text={deselectAll:v("deselectAllText"),filter:v("filterText"),selectAll:v("selectAllText")};x.exposeSelectedOptions=T;x.getSelectedCount=E;x.hasSelectedMultipleItems=y;x.isGroupVisible=F;x.isSelectAllToggleDisabled=j;x.onToggleDropdown=C;$();function O(e){m.push(S.getLabel(e))}function A(){var e,t,l;m.length=0;x.groupOptions={};x.optionsFiltered={};x.groups=S.getGroups();angular.forEach(S.getOptions(),function(n,o){angular.forEach(n,function(n,i){t=false;l=S.getValue(n);for(e=0;e<h.length;e++){if(angular.equals(h[e],l)){t=true;O(n);break}}if(angular.isUndefined(x.groupOptions[o])){x.groupOptions[o]=[]}x.groupOptions[o].push({id:i,label:S.getLabel(n),value:l,selected:t})})});V()}function T(){var e;m.length=0;h=[];angular.forEach(x.groupOptions,function(t,l){angular.forEach(t,function(t,n){if(!t.selected){return}e=S.getOption(n,l);O(e);h.push(S.getValue(e))})});g=true;a.$setViewValue(h);b(D,{label:V()})}function E(){return h.length}function v(e,l){if(angular.isDefined(c[e])){return l?t(c[e])(r):c[e]}return o[e]}function y(){return E()>1}function $(){u.append(e("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(D));r.$on("$destroy",function(){D.$destroy()});r.$watch(S.getOptionsExpression(),function(e){S.setOptions(e);A()},true);r.$watch(function(){return a.$modelValue},function(e){if(g){g=false;return}if(angular.isArray(e)){h=e}A()},true);a.$isEmpty=function(e){return!angular.isArray(e)||e.length===0}}function F(e){if(!S.isGrouped()){return false}return s(x.groupOptions[e],x.filter).length>0}function j(){if(!f){return h.length===0}else if(!d){return h.length===S.getOptionsCount()}return false}function C(e){if(!e){l(function(){x.filter={}})}w(D,{isOpen:e})}function V(){var e=c.selectText||o.selectText;if(m.length>0){if(angular.isDefined(m[0])){e=i.joinLabels(m)}else{e=i.pluralize(m,c.selectedSuffixText,c.selectedSuffixSingularText||c.selectedSuffixText)}}x.selectedLabel=e;if(angular.isFunction(p.assign)){p.assign(r,e)}return e}}}})();(function(){"use strict";e.$inject=["$parse"];angular.module("amo.multiselect").factory("AmoMultiselectFactory",e);function e(e){var t=/^\s*(?:([\s\S]+?)\s+as\s+)?([\s\S]+?)(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+([\$\w][\$\w]*)\s+in\s+([\s\S]+?)\s*$/;return function l(n,o){var i=this;var s;i.getGroup=r;i.getGroups=u;i.getLabel=c;i.getOption=p;i.getOptions=d;i.getOptionsCount=g;i.getOptionsExpression=f;i.getValue=m;i.isGrouped=w;i.setOptions=h;b();function r(e){if(!w()){return null}return s.groupFunction(o,a(e))}function u(e){return s.groups}function c(e){return s.labelFunction(o,a(e))}function a(e){var t={};t[s.value]=e;return t}function p(e,t){if(angular.isUndefined(t)){t=null}return s.groupOptions[t][e]}function d(){return s.groupOptions}function g(){return s.optionsCount}function f(){return s.optionsExpression}function m(e){return s.selectFunction(o,a(e))}function b(){var l=n.match(t);if(l===null){throw new Error('Expected "'+n+'" to be in form of "[_select_ as] _label_ [group by _group_] for _value_ in _array_"')}s={groupFunction:angular.isDefined(l[3])?e(l[3]):null,labelFunction:e(l[2]),optionsExpression:l[5],selectFunction:e(angular.isDefined(l[1])?l[1]:l[4]),value:l[4]}}function w(){return s.groupFunction!==null}function h(e){var t;if(!angular.isArray(e)){throw new Error('Expected "'+s.optionsExpression+'" to be Array')}s.groups=[];s.groupOptions={};s.optionsCount=e.length;e.forEach(function(e){t=r(e);if(angular.isUndefined(s.groupOptions[t])){s.groups.push(t);s.groupOptions[t]=[]}s.groupOptions[t].push(e)});return s.groupOptions}return i}}})();(function(){"use strict";e.$inject=["amoMultiselectConfig"];angular.module("amo.multiselect").service("amoMultiselectFormatService",e);function e(e){var t=this;t.joinLabels=l;t.pluralize=n;function l(e){var t,l;if(e.length===1){return e[0]}l=e.pop();t=e.join(", ");if(e.length>1){t+=","}return t+" and "+l}function n(t,l,n){var o=t.length+" ";if(t.length===1){o+=n||e.selectedSuffixSingularText}else{o+=l||e.selectedSuffixText}return o}}})();(function(){"use strict";e.$inject=["$timeout"];angular.module("multiselectDemo").controller("AppController",e);function e(e){var t=this;t.modelObject=[{id:2,label:"Two"}];t.modelObjectGrouped=[{category:"Pizza",id:2,label:"Two"}];t.modelObjectProperty=[2];t.modelStringTwo=["One","Two"];t.optionsObject=[{id:1,label:"One"},{id:2,label:"Two"},{id:3,label:"Three"}];t.optionsObjectDefer=[{id:1},{id:2},{id:3}];t.optionsObjectGrouped=[{category:"Pizza",id:1,label:"One"},{category:"Pizza",id:2,label:"Two"},{category:"Hamburger",id:3,label:"Three"}];t.optionsString=["One","Two","Three"];t.addObject=l;t.onChange=n;t.onToggleDropdown=o;function l(){t.optionsObject.push({id:t.optionsObject.length+1,label:"Option "+(t.optionsObject.length+1)})}function n(e){console.log("onChange",e)}function o(l){console.log("onToggleDropdown",l);if(l){e(function(){t.optionsObjectDefer=t.optionsObject},300)}}}})();angular.module("amo.multiselect").run(["$templateCache",function(e){e.put("amo/multiselect/multiselect-dropdown.html",'<div class="btn-group btn-group-multiselect" auto-close="outsideClick" ng-attr-title="{{ multiselectDropdown.selectedLabel }}" ng-class="{ \'state-selected-multiple\': multiselectDropdown.hasSelectedMultipleItems() }" on-toggle="multiselectDropdown.onToggleDropdown(open)" uib-dropdown> <button type="button" class="btn btn-default" ng-disabled="multiselectDropdown.state.isDisabled" uib-dropdown-toggle> <span class="text" ng-bind="multiselectDropdown.selectedLabel"></span> <span class="badge" ng-bind="multiselectDropdown.getSelectedCount()"></span> <span class="caret"></span> </button> <div uib-dropdown-menu> <input type="text" class="form-control" ng-if="::multiselectDropdown.state.isFilterEnabled" ng-model="multiselectDropdown.filter.label" placeholder="{{ ::multiselectDropdown.text.filter }}"> <ul class="dropdown-menu-list list-unstyled"> <li ng-if="::multiselectDropdown.state.isSelectAllVisible"> <a ng-class="{ \'text-muted\': multiselectDropdown.isSelectAllToggleDisabled() }" ng-click="multiselectDropdown.toggleAllSelectedState()"> <input type="checkbox" ng-if="::multiselectDropdown.state.isSelectAllCheckboxVisible" ng-model="multiselectDropdown.isAllSelected"> <span ng-bind="multiselectDropdown.getSelectAllLabel()"></span> </a> </li> <li class="divider" ng-if="::multiselectDropdown.state.isSelectAllVisible"></li> <li class="dropdown-header" ng-bind="group" ng-if="multiselectDropdown.isGroupVisible(group)" ng-repeat-start="group in multiselectDropdown.groups"> </li> <li ng-repeat="option in multiselectDropdown.optionsFiltered[group] = (multiselectDropdown.groupOptions[group] | filter : multiselectDropdown.filter)"> <a ng-attr-title="{{ option.label }}" ng-click="multiselectDropdown.toggleSelectedState(option)"> <input type="checkbox" ng-model="option.selected"> <span ng-bind="option.label"></span> </a> </li> <li ng-repeat-end></li> </ul> </div> </div> ')}]);