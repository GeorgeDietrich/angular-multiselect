// AngularJS Multiselect
// https://github.com/namoscato/angular-multiselect
// 
// Version: 1.1.4
// License: MIT
(function(){"use strict";angular.module("amo.multiselect",["ui.bootstrap.dropdown"])})();(function(){"use strict";angular.module("amo.multiselect").constant("amoMultiselectConfig",{deselectAllText:"Deselect All",searchText:"Search...",selectAllText:"Select All",selectedSuffixSingularText:"item",selectedSuffixText:"items",selectText:"Select..."})})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",e);function e(){return{link:e,restrict:"E",templateUrl:"amo/multiselect/multiselect-dropdown.html"};function e(e,t,n){var l=e.multiselectDropdown;l.getSelectAllLabel=o;l.toggleAllSelectedState=i;l.toggleSelectedState=r;function o(){return l.isAllSelected?l.text.deselectAll:l.text.selectAll}function i(){l.isAllSelected=!l.isAllSelected;angular.forEach(l.optionsFiltered,function(e){angular.forEach(e,function(e){e.selected=l.isAllSelected})});l.exposeSelectedOptions()}function r(e){e.selected=!e.selected;l.exposeSelectedOptions()}}}})();(function(){"use strict";e.$inject=["$compile","$parse","$timeout","AmoMultiselectFactory","amoMultiselectConfig","amoMultiselectFormatService","filterFilter"];angular.module("amo.multiselect").directive("amoMultiselect",e);function e(e,t,n,l,o,i,r){return{link:u,replace:true,require:"ngModel",restrict:"E"};function u(u,s,c,a){var p=c.label?t(c.label):angular.noop,g,d=[],f=c.onChange?t(c.onChange):angular.noop,m=c.onToggleDropdown?t(c.onToggleDropdown):angular.noop,h=[];var b=new l(c.options,u),w=u.$new(),x={};w.multiselectDropdown=x;x.groups=[];x.groupOptions={};x.optionsFiltered={};x.search={};x.text={deselectAll:c.deselectAllText||o.deselectAllText,search:c.searchText||o.searchText,selectAll:c.selectAllText||o.selectAllText};x.exposeSelectedOptions=D;x.getSelectedCount=O;x.hasSelectedMultipleItems=A;x.isGroupVisible=$;x.onToggleDropdown=E;T();function S(e){d.push(b.getLabel(e))}function v(){var e,t,n;d.length=0;x.groupOptions={};x.optionsFiltered={};x.groups=b.getGroups();angular.forEach(b.getOptions(),function(l,o){angular.forEach(l,function(l,i){t=false;n=b.getValue(l);for(e=0;e<h.length;e++){if(angular.equals(h[e],n)){t=true;S(l);break}}if(angular.isUndefined(x.groupOptions[o])){x.groupOptions[o]=[]}x.groupOptions[o].push({id:i,label:b.getLabel(l),value:n,selected:t})})});F()}function D(){var e;d.length=0;h.length=0;angular.forEach(x.groupOptions,function(t,n){angular.forEach(t,function(t,l){if(!t.selected){return}e=b.getOption(l,n);S(e);h.push(b.getValue(e))})});g=true;a.$setViewValue(h);f(w,{label:F()})}function O(){return h.length}function A(){return O()>1}function T(){s.append(e("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(w));u.$on("$destroy",function(){w.$destroy()});u.$watch(b.getOptionsExpression(),function(e){b.setOptions(e);v()},true);u.$watch(function(){return a.$modelValue},function(e){if(g){g=false;return}if(angular.isArray(e)){h=e}v()},true)}function $(e){if(!b.isGrouped()){return false}return r(x.groupOptions[e],x.search).length>0}function E(e){if(!e){n(function(){x.search={}})}m(w,{isOpen:e})}function F(){var e=c.selectText||o.selectText;if(d.length>0){if(angular.isDefined(d[0])){e=i.joinLabels(d)}else{e=i.pluralize(d,c.selectedSuffixText,c.selectedSuffixSingularText||c.selectedSuffixText)}}x.selectedLabel=e;if(angular.isFunction(p.assign)){p.assign(u,e)}return e}}}})();(function(){"use strict";e.$inject=["$parse"];angular.module("amo.multiselect").factory("AmoMultiselectFactory",e);function e(e){var t=/^\s*(?:([\s\S]+?)\s+as\s+)?([\s\S]+?)(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+([\$\w][\$\w]*)\s+in\s+([\s\S]+?)\s*$/;return function n(l,o){var i=this;var r;i.getGroup=u;i.getGroups=s;i.getLabel=c;i.getOption=p;i.getOptionsExpression=g;i.getOptions=d;i.getValue=f;i.isGrouped=h;i.setOptions=b;m();function u(e){if(!h()){return null}return r.groupFunction(o,a(e))}function s(e){return r.groups}function c(e){return r.labelFunction(o,a(e))}function a(e){var t={};t[r.value]=e;return t}function p(e,t){if(angular.isUndefined(t)){t=null}return r.groupOptions[t][e]}function g(){return r.optionsExpression}function d(){return r.groupOptions}function f(e){return r.selectFunction(o,a(e))}function m(){var n=l.match(t);if(n===null){throw new Error('Expected "'+l+'" to be in form of "[_select_ as] _label_ [group by _group_] for _value_ in _array_"')}r={groupFunction:angular.isDefined(n[3])?e(n[3]):null,labelFunction:e(n[2]),optionsExpression:n[5],selectFunction:e(angular.isDefined(n[1])?n[1]:n[4]),value:n[4]}}function h(){return r.groupFunction!==null}function b(e){var t;if(!angular.isArray(e)){throw new Error('Expected "'+r.optionsExpression+'" to be Array')}r.groups=[];r.groupOptions={};e.forEach(function(e){t=u(e);if(angular.isUndefined(r.groupOptions[t])){r.groups.push(t);r.groupOptions[t]=[]}r.groupOptions[t].push(e)});return r.groupOptions}return i}}})();(function(){"use strict";e.$inject=["amoMultiselectConfig"];angular.module("amo.multiselect").service("amoMultiselectFormatService",e);function e(e){var t=this;t.joinLabels=n;t.pluralize=l;function n(e){var t,n;if(e.length===1){return e[0]}n=e.pop();t=e.join(", ");if(e.length>1){t+=","}return t+" and "+n}function l(t,n,l){var o=t.length+" ";if(t.length===1){o+=l||e.selectedSuffixSingularText}else{o+=n||e.selectedSuffixText}return o}}})();angular.module("amo.multiselect").run(["$templateCache",function(e){e.put("multiselect/multiselect-dropdown.html",'<div\n    class="btn-group btn-group-multiselect"\n    auto-close="outsideClick"\n    ng-attr-title="{{ multiselectDropdown.selectedLabel }}"\n    ng-class="{ \'state-selected-multiple\': multiselectDropdown.hasSelectedMultipleItems() }"\n    on-toggle="multiselectDropdown.onToggleDropdown(open)"\n    uib-dropdown>\n    <button\n        type="button"\n        class="btn btn-default"\n        uib-dropdown-toggle>\n        <span class="text" ng-bind="multiselectDropdown.selectedLabel"></span>\n        <span class="badge" ng-bind="multiselectDropdown.getSelectedCount()"></span>\n        <span class="caret"></span>\n    </button>\n    <div uib-dropdown-menu>\n        <input\n            type="text"\n            class="form-control"\n            ng-model="multiselectDropdown.search.label"\n            placeholder="{{ multiselectDropdown.text.search }}">\n        <ul class="dropdown-menu-list list-unstyled">\n            <li>\n                <a ng-click="multiselectDropdown.toggleAllSelectedState()">\n                    <input type="checkbox" ng-model="multiselectDropdown.isAllSelected">\n                    <span ng-bind="multiselectDropdown.getSelectAllLabel()"></span>\n                </a>\n            </li>\n            <li class="divider"></li>\n            <li\n                class="dropdown-header"\n                ng-bind="group"\n                ng-if="multiselectDropdown.isGroupVisible(group)"\n                ng-repeat-start="group in multiselectDropdown.groups">\n            </li>\n            <li ng-repeat="option in multiselectDropdown.optionsFiltered[group] = (multiselectDropdown.groupOptions[group] | filter : multiselectDropdown.search)">\n                <a\n                    ng-attr-title="{{ option.label }}"\n                    ng-click="multiselectDropdown.toggleSelectedState(option)">\n                    <input type="checkbox" ng-model="option.selected">\n                    <span ng-bind="option.label"></span>\n                </a>\n            </li>\n            <li ng-repeat-end></li>\n        </ul>\n    </div>\n</div>\n')}]);